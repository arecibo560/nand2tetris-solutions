// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Central Processing unit (CPU).
 * Consists of an ALU and a set of registers, designed to fetch and 
 * execute instructions written in the Hack machine language.
 * In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM=0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time unit. If reset=1 then the 
 * CPU jumps to address 0 (i.e. sets pc=0 in next time unit) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

	/**
	  * Decode the instruction
	  *
	  * CODE: i xx a cccccc dd jjj
	  *
	  * Ainst: i=0
	  * Cinst: i=1
	  * 	a: 1 = A Register
	  *	   0 = Memory
	  * 	c: ALU function
	  *	d: Result Registers
	  *	J: Next instruction
	  */

	Not(in=instruction[15], out=Ainst);
	Not(in=Ainst, out=Cinst);
	
	//Determine where ALU output goes
	And(a=Cinst, b=instruction[5], out=ALUoutToAreg);
	Mux16(a=instruction, b=ALUout, sel=ALUoutToAreg, out=AregIn);
	
	//Load from A-Register?
	Or(a=Ainst, b=ALUoutToAreg, out=loadAreg);
	ARegister(in=AregIn, load=loadAreg, out=Aout);

	Mux16(a=Aout, b=inM, sel=instruction[12], out=AMout);

	And(a=Cinst, b=instruction[4], out=loadDreg);
	DRegister(in=ALUout, load=loadDreg, out=Dout);

	/**
	  * Execute the instruction
	  *
	  */

	ALU(x=Dout, y=AMout, zx=instruction[11], nx=instruction[10], 
		zy=instruction[9], ny=instruction[8], f=instruction[7], 
		no=instruction[6], out=ALUout, zr=ZRout, ng=NGout);

	Or16(a=false, b=Aout, out[0..14]=addressM);
    	Or16(a=false, b=ALUout, out=outM);

	And(a=Cinst, b=instruction[3], out=writeM);

	/**
	  * Fetch the next instruction
	  *
	  */	
	
	//JMP if zero
	And(a=ZRout, b=instruction[1], out=JEQ);

	//JMP if negative
	And(a=NGout, b=instruction[2], out=JLT);

	//JMP if positive
	Or(a=ZRout, b=NGout, out=ZorNeg);
	Not(in=ZorNeg, out=pos);
	And(a=pos, b=instruction[0], out=JGT);

	//JMP if <=0
	Or(a=JEQ, b=JLT, out=JLE);

	//Load PC
	Or(a=JLE, b=JGT, out=JMPtoA);
	And(a=Cinst, b=JMPtoA, out=PCload);
	Not(in=PCload, out=PCinc);
	
	PC(in=Aout, inc=PCinc, load=PCload, reset=reset, out[0..14]=pc);

}
